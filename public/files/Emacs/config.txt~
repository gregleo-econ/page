;;;;;;;;;;;;;;;;;;;;;;
;;Package Repository;;
;;;;;;;;;;;;;;;;;;;;;;

(require 'package)

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)



;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;PACKAGES Loading;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;
 
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

; then define packages you use
(use-package typit)
(use-package speed-type)
(use-package nofrils-acme-theme)
(use-package fireplace)
(use-package counsel-tramp)
(use-package ace-flyspell)
(use-package use-package)
(use-package counsel)
(use-package ivy)
(use-package avy)
;(use-package auctex)
(use-package ace-flyspell)
(use-package multiple-cursors)
(use-package typit)
(use-package visible-mark)
;(use-package edit-indiret)
(use-package cyberpunk-theme)
(use-package expand-region)
(use-package modalka)


;;;;;;;;;;;;;;;;
;;Initial View;;
;;;;;;;;;;;;;;;;

(setq inhibit-startup-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(split-window-right)
(global-visual-line-mode 1)
(find-file "~/Dropbox/org/gtd.org")
(outline-show-all)
(other-window 1)
(find-file "~/Dropbox/org/inbox.org")
(other-window 1)
(column-number-mode 1)
(line-number-mode 1)

;;;;;;;;;;
;Ivy/Avy;;
;;;;;;;;;;

(ivy-mode)
(global-set-key (kbd "M-s") 'avy-goto-char-timer)
(global-set-key (kbd "C-s") 'isearch-forward)
(setq sentence-end-double-space nil)

;;;;;;;;;;;;;
;;My Macros;;
;;;;;;;;;;;;;

(fset 'greg-move-sentence-forward
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("goxfo vu" 0 "%d")) arg)))

;;;;;;;;;;;;;;;;
;;SERVER START;;
;;;;;;;;;;;;;;;;

(server-start)


;;;;;;;;;
;;THEME;;
;;;;;;;;;

;(load-theme 'cyberpunk t)



;;;;;;;;;;;;;;;;;;;;
;;POWERLINE COLORS;;
;;;;;;;;;;;;;;;;;;;;
(set-face-attribute 'mode-line nil
                    :foreground "Black"
                    :background "DarkOrange"
                    :box nil)


;;;;;;;;;;;;
;;ORG MODE;;
;;;;;;;;;;;;

(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-agenda-files '("~/dropbox/org/inbox.org"
                         "~/dropbox/org/gtd.org"
                         "~/dropbox/org/tickler.org"))


(setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file "~/dropbox/org/inbox.org")
                               "* TODO %i%?")
                              ("T" "Tickler" entry
                               (File+headline "~/dropbox/org/tickler.org" "Tickler")
                               "* %i%? \n %U")))


(setq org-refile-targets '(("~/dropbox/org/gtd.org" :maxlevel . 2)
                           ("~/dropbox/org/someday.org" :level . 1)
                           ("~/dropbox/org/tickler.org" :maxlevel . 2)))

(setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))

(setq org-agenda-custom-commands 
      '(
	("i" "On The Internet" tags-todo "@internet"
         ((org-agenda-overriding-header "Internet")))
	("e" "Vie Email" tags-todo "@email"
         ((org-agenda-overriding-header "Email")))
	("p" "On My Phone" tags-todo "@Phone"
         ((org-agenda-overriding-header "Phone")))
	("o" "At the office" tags-todo "@office"
         ((org-agenda-overriding-header "Office")))
	("h" "At home" tags-todo "@home"
         ((org-agenda-overriding-header "Home")))
	("c" "On My Computer" tags-todo "@computer"
         ((org-agenda-overriding-header "Computer")))

	))




;;;;;;;;;;;;;;;;;;;
;;ORG Beautifying;;
;;;;;;;;;;;;;;;;;;;

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
 '(org-level-4 ((t (:inherit outline-4 :height 0.9))))
 '(org-level-5 ((t (:inherit outline-5 :height 0.8)))))
(custom-set-variables
 '(org-tags-column 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Modalka Rebind For Modal Editing;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'modalka)
(global-set-key (kbd "M-SPC") #'modalka-mode)
(define-key modalka-mode-map (kbd "F") #'kill-word)
(define-key modalka-mode-map (kbd "D") #'backward-kill-word)
(define-key modalka-mode-map (kbd "d") #'delete-backward-char)
(define-key modalka-mode-map (kbd "f") #'delete-char)
(define-key modalka-mode-map (kbd "i") #'previous-line)
(define-key modalka-mode-map (kbd "k") #'next-line)
(define-key modalka-mode-map (kbd "I") #'backward-paragraph)
(define-key modalka-mode-map (kbd "K") #'forward-paragraph)
(define-key modalka-mode-map (kbd "j") #'backward-char)
(define-key modalka-mode-map (kbd "l") #'forward-char)
(define-key modalka-mode-map (kbd "J") #'backward-word)
(define-key modalka-mode-map (kbd "L") #'forward-word)
(define-key modalka-mode-map (kbd "o") #'forward-sentence)
(define-key modalka-mode-map (kbd "u") #'backward-sentence)
(define-key modalka-mode-map (kbd "g") #'set-mark-command)
(define-key modalka-mode-map (kbd "t") #'pop-to-mark-command)
(define-key modalka-mode-map (kbd "s") #'avy-goto-char-2)
(define-key modalka-mode-map (kbd "v") #'yank)
(define-key modalka-mode-map (kbd "x") #'kill-region)
(define-key modalka-mode-map (kbd "z") #'undo)
(define-key modalka-mode-map (kbd "r") #'redo)
(define-key modalka-mode-map (kbd "c") #'kill-ring-save)
(define-key modalka-mode-map (kbd "+") #'text-scale-increase)
(define-key modalka-mode-map (kbd "-") #'text-scale-decrease)
(define-key modalka-mode-map (kbd "h") #'end-of-line)
(define-key modalka-mode-map (kbd "H") #'beginning-of-line)
(define-key modalka-mode-map (kbd "W") #'capitalize-word)
(define-key modalka-mode-map (kbd "w") #'downcase-word)
(define-key modalka-mode-map (kbd "r") #'cool-moves/sentence-forward)
(define-key modalka-mode-map (kbd "R") #'cool-moves/sentence-backward)
(define-key modalka-mode-map (kbd "'") #'er/expand-region)
(define-key modalka-mode-map (kbd "e") #'mc/mark-next-like-this)
(modalka-define-kbd "1" "C-1")
(modalka-define-kbd "2" "C-2")
(modalka-define-kbd "3" "C-3")
(modalka-define-kbd "4" "C-4")
(modalka-define-kbd "5" "C-5")
(modalka-define-kbd "6" "C-6")
(modalka-define-kbd "7" "C-7")
(modalka-define-kbd "8" "C-8")
(modalka-define-kbd "9" "C-9")


;;;;;;;;;;;;;;;;;;;;;
;;Visible Mark Mode;;
;;;;;;;;;;;;;;;;;;;;;

(defface visible-mark-active ;; put this before (require 'visible-mark)
'((((type tty) (class mono)))
(t (:background "magenta"))) "")
(setq visible-mark-max 2) 
(setq visible-mark-faces `(visible-mark-face1 visible-mark-face2 visible-mark-face3))
(require 'visible-mark)
(global-visible-mark-mode 1) 
(setq-default cursor-type '(bar . 2))
(setq modalka-cursor-type 'box)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Make Typing Over Region Behave As Expected;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(delete-selection-mode 1)


;;;;;;;;;;;;;;;;;
;;Expand Region;;
;;;;;;;;;;;;;;;;;

(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(put 'narrow-to-region 'disabled nil)


;;;;;;;;;;;;;;;;;
;;Multi-Cursor;;;
;;;;;;;;;;;;;;;;;

(global-set-key (kbd "C-c m c") 'mc/edit-lines)



;;;;;;;;;;;;;;
;;Cool Moves;;
;;;;;;;;;;;;;;

(add-to-list 'load-path "~/.emacs.d/lisp/cool-moves")
(load "cool-moves")

;;;;;;;;;;;;;;;;;;;;;;;;
;;AUctex Customization;;
;;;;;;;;;;;;;;;;;;;;;;;;

(setq TeX-PDF-mode t)
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-method 'synctex)
(setq TeX-view-program-list
'(("Sumatra PDF" ("\"C:/Program Files (x86)/SumatraPDF/SumatraPDF.exe\" -reuse-instance -invert-colors -fullscreen"
   (mode-io-correlate " -forward-search %b %n ") " %o"))))

(eval-after-load 'tex
 '(progn
   (assq-delete-all 'output-pdf TeX-view-program-selection)
   (add-to-list 'TeX-view-program-selection '(output-pdf "Sumatra PDF"))))


;;;;;;;;;;;;;;;
;;SPELL CHECK;;
;;;;;;;;;;;;;;;

(setq ispell-program-name "C:/cygwin64/bin/aspell.exe")
(setq ispell-personal-dictionary "~/.ispell")
(require 'ispell)
(global-set-key (kbd "<f8>") 'TeX-ispell-document)
(global-set-key (kbd "C-<f8>") 'flyspell-mode)
